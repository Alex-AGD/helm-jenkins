apiVersion: v1
kind: ConfigMap
metadata:
  name: basic-security
  namespace: {{ .Values.namespace }}
data:
  basic-security.groovy: |
    #!groovy
    import jenkins.model.*
    import hudson.security.*
    def instance = Jenkins.getInstance()
    println "--> creating local user '{{ .Values.credentials.admin.username }}'"
    def password = System.getenv("PASS")
    def hudsonRealm = new HudsonPrivateSecurityRealm(false)
    hudsonRealm.createAccount('{{ .Values.credentials.admin.username }}', password)
    instance.setSecurityRealm(hudsonRealm)
    def strategy = new FullControlOnceLoggedInAuthorizationStrategy()
    strategy.setAllowAnonymousRead(true)
    instance.setAuthorizationStrategy(strategy)
    instance.save()

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: jenkins-config
  namespace: {{ .Values.namespace }}
data:
  jenkins.yaml: |
    jenkins:
      numExecutors: {{ .Values.jenkins.config.numExecutors }}
      clouds:
        - kubernetes:
            containerCapStr: "10"
            maxRequestsPerHostStr: "32"
            jenkinsUrl: "http://jenkins:{{ .Values.service.master.port }}"
            name: "kubernetes"
            namespace: "{{ .Values.namespace }}"
            skipTlsVerify: true
    credentials:
      system:
        domainCredentials:
          - credentials:
              - usernamePassword:
                  description: "Githubuser"
                  id: "{{ .Values.github.credentials.id }}"
                  password: "{{ .Values.github.credentials.password }}"
                  scope: GLOBAL
                  username: "{{ .Values.github.credentials.username }}"
    unclassified:
      location:
        adminAddress: "{{ .Values.credentials.admin.email }}"
        url: "{{ .Values.credentials.admin.url }}"
      shell:
        shell: "/bin/bash"